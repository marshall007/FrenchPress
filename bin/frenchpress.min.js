(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var CACHE, DOM, makeElem, requestAnimationFrame, update;

DOM = require("./lib/dom");

update = require("./lib/update");

makeElem = require("./lib/makeElem");

CACHE = null;

requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame;

window.fp = {
  render: function(parent, element) {
    CACHE = element;
    parent.innerHTML = null;
    return parent.appendChild(makeElem(element));
  },
  element: function(_arg) {
    var init, render;
    init = _arg.init, render = _arg.render;
    return function(props) {
      var REDRAW, state;
      REDRAW = function() {
        var changes, nodes;
        nodes = render.bind(state, DOM, props)();
        changes = update(nodes, CACHE);
        requestAnimationFrame(function() {
          var change, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = changes.length; _i < _len; _i++) {
            change = changes[_i];
            _results.push(change());
          }
          return _results;
        });
        return CACHE = nodes;
      };
      state = init != null ? init.bind({
        REDRAW: REDRAW
      })() || {} : {};
      props || (props = {});
      return render.bind(state, DOM, props)();
    };
  }
};



},{"./lib/dom":2,"./lib/makeElem":3,"./lib/update":4}],2:[function(require,module,exports){
var Node, nodes, tag, tags, _i, _len,
  __slice = [].slice;

tags = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "tspan", "injection", "text"];

Node = function(tag) {
  return function() {
    var args, attrs, i, node, nodes, result, _i, _len;
    args = arguments[0], nodes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (args != null) {
      if (typeof args === "object" && !(args.fp || Array.isArray(args))) {
        attrs = args;
      } else {
        nodes.unshift(args);
      }
    }
    for (i = _i = 0, _len = nodes.length; _i < _len; i = ++_i) {
      node = nodes[i];
      if (node == null) {
        nodes.splice(i, 1);
      } else if (Array.isArray(node)) {
        nodes.splice.apply(nodes, [i, 1].concat(__slice.call(node)));
      }
    }
    result = {
      tag: tag,
      fp: true
    };
    if (attrs != null) {
      result.attrs = attrs;
    }
    if (nodes[0] != null) {
      result.nodes = nodes;
    }
    return result;
  };
};

nodes = {};

for (_i = 0, _len = tags.length; _i < _len; _i++) {
  tag = tags[_i];
  nodes[tag] = Node(tag);
}

nodes["mapTo"] = function(tag) {
  return function(data) {
    return nodes[tag](data);
  };
};

module.exports = nodes;



},{}],3:[function(require,module,exports){
var makeElem;

makeElem = function(node, depth) {
  var attr, attrs, child, elem, i, nodes, tag, value, _i, _len;
  if (depth == null) {
    depth = "0";
  }
  if (node.fp) {
    tag = node.tag, attrs = node.attrs, nodes = node.nodes;
    elem = document.createElement(tag);
    elem.setAttribute("fp-id", depth);
    for (attr in attrs) {
      value = attrs[attr];
      if (attr.slice(0, 2) === "on") {
        elem.addEventListener(attr.substring(2).toLowerCase(), value);
      } else if (attr === "innerHTML") {
        elem.innerHTML = value;
      } else {
        elem.setAttribute(attr, value);
      }
    }
    if (nodes != null) {
      for (i = _i = 0, _len = nodes.length; _i < _len; i = ++_i) {
        child = nodes[i];
        elem.appendChild(makeElem(child, "" + depth + "." + i));
      }
    }
  } else {
    elem = document.createTextNode("" + node);
  }
  return elem;
};

module.exports = makeElem;



},{}],4:[function(require,module,exports){
var getUpdates, makeElem,
  __slice = [].slice;

makeElem = require("./makeElem");

getUpdates = function(cur, old, depth) {
  var attr, changes, elem, event, getElem, getParent, getTextElem, i, value, _i, _ref, _ref1, _ref2;
  if (depth == null) {
    depth = "0";
  }
  getParent = function() {
    return document.querySelector("[fp-id='" + depth.slice(0, depth.lastIndexOf(".")) + "']");
  };
  getElem = function() {
    return document.querySelector("[fp-id='" + depth + "']");
  };
  getTextElem = function() {
    return getParent().childNodes[depth.substring(depth.lastIndexOf(".") + 1)];
  };
  changes = [];
  if ((cur != null) || (old != null)) {
    if (old == null) {
      changes.push(function() {
        return getParent().appendChild(makeElem(cur, depth));
      });
    } else if (cur == null) {
      changes.push(function() {
        var elem;
        elem = getElem();
        return elem.parentNode.removeChild(elem);
      });
    } else if (cur.fp && old.fp) {
      if (cur.tag !== old.tag) {
        changes.push(function() {
          var elem;
          elem = getElem();
          return elem.parentNode.replaceChild(makeElem(cur, depth), elem);
        });
      } else {
        _ref = cur.attrs;
        for (attr in _ref) {
          value = _ref[attr];
          if (((_ref1 = old.attrs[attr]) != null ? _ref1.toString() : void 0) !== value.toString()) {
            if (attr.slice(0, 2) === "on") {
              event = attr.substring(2).toLowerCase();
              changes.push(function() {
                var elem;
                elem = getElem();
                elem.removeEventListener(event, old.attrs[attr]);
                return elem.addEventListener(event, value);
              });
            } else if (attr === "innerHTML") {
              changes.push(function() {
                return getElem().innerHTML = value;
              });
            } else {
              changes.push(function() {
                return getElem().setAttribute(attr, value);
              });
            }
          }
        }
        for (attr in old.attrs) {
          if (cur.attrs[attr] == null) {
            if (attr.slice(0, 2) === "on") {
              event = attr.substring(2).toLowerCase();
              changes.push(function() {
                return getElem().removeEventListener(event, old.attrs[attr]);
              });
            } else if (attr === "innerHTML") {
              changes.push(function() {
                return getElem().innerHTML = "";
              });
            } else {
              changes.push(function() {
                return getElem().removeAttribute(attr);
              });
            }
          }
        }
        if ((cur.nodes != null) && (old.nodes != null)) {
          for (i = _i = 0, _ref2 = Math.max(cur.nodes.length, old.nodes.length); 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
            changes.splice.apply(changes, [changes.length, 0].concat(__slice.call(getUpdates(cur.nodes[i], old.nodes[i], "" + depth + "." + i))));
          }
        } else if (old.nodes != null) {
          changes.push(function() {
            return getElem().innerHTML = "";
          });
        } else if (cur.nodes != null) {
          changes.push(function() {
            var child, _j, _len, _ref3, _results;
            _ref3 = cur.nodes;
            _results = [];
            for (i = _j = 0, _len = _ref3.length; _j < _len; i = ++_j) {
              child = _ref3[i];
              _results.push(getElem().appendChild(makeElem(child, "" + depth + "." + i)));
            }
            return _results;
          });
        }
      }
    } else if (cur.fp) {
      elem = getTextElem();
      changes.push(function() {
        return elem.parentNode.replaceChild(makeElem(cur, depth), elem);
      });
    } else if (cur.toString() !== old.toString()) {
      changes.push(function() {
        return getTextElem().textContent = "" + cur;
      });
    }
  }
  return changes;
};

module.exports = getUpdates;



},{"./makeElem":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
